{
  "name": "fill-range",
  "description": "Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.",
  "version": "2.2.0",
  "homepage": "https://github.com/jonschlinkert/fill-range",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/fill-range.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/fill-range/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/jonschlinkert/fill-range/blob/master/LICENSE"
  },
  "files": [
    "index.js"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "is-number": "^1.1.0",
    "isobject": "^0.2.0",
    "randomatic": "^1.1.0",
    "repeat-element": "^1.0.0",
    "repeat-string": "^1.5.0"
  },
  "devDependencies": {
    "benchmarked": "^0.1.3",
    "chalk": "^0.5.1",
    "should": "*"
  },
  "keywords": [
    "alpha",
    "alphabetical",
    "bash",
    "brace",
    "expand",
    "expansion",
    "glob",
    "match",
    "matches",
    "matching",
    "number",
    "numerical",
    "range",
    "ranges",
    "sh"
  ],
  "readme": "# fill-range [![NPM version](https://badge.fury.io/js/fill-range.svg)](http://badge.fury.io/js/fill-range)  [![Build Status](https://travis-ci.org/jonschlinkert/fill-range.svg)](https://travis-ci.org/jonschlinkert/fill-range) \n\n> Fill in a range of numbers or letters, optionally passing an increment or multiplier to use.\n\n## Install with [npm](npmjs.org)\n\n```bash\nnpm i fill-range --save\n```\n\n## Usage\n\n```js\nvar range = require('fill-range');\n\nrange('a', 'e');\n//=> ['a', 'b', 'c', 'd', 'e']\n```\n\n**Params**\n\n```js\nrange(start, stop, step, options, fn);\n```\n\n - `start`: **{String|Number}** the number or letter to start with\n - `end`: **{String|Number}** the number or letter to end with\n - `step`: **{String|Number}** optionally pass the step to use. works for letters or numbers.\n - `options`: **{Object}**:\n    + `makeRe`: return a regex-compatible string (still returned as an array for consistency)\n    + `step`: pass the step on the options as an alternative to passing it as an argument\n    + `silent`: `true` by default, set to false to throw errors for invalid ranges. \n - `fn`: **{Function}** optionally [pass a function](#custom-function) to modify each character \n\n\n**Examples**\n\n```js\nrange(1, 3)\n//=> ['1', '2', '3']\n\nrange('1', '3')\n//=> ['1', '2', '3']\n\nrange('0', '-5')\n//=> [ '0', '-1', '-2', '-3', '-4', '-5' ]\n\nrange(-9, 9, 3)\n//=> [ '-9', '-6', '-3', '0', '3', '6', '9' ])\n\nrange('-1', '-10', '-2')\n//=> [ '-1', '-3', '-5', '-7', '-9' ]\n\nrange('1', '10', '2')\n//=> [ '1', '3', '5', '7', '9' ]\n\nrange('a', 'e')\n//=> ['a', 'b', 'c', 'd', 'e']\n\nrange('a', 'e', 2)\n//=> ['a', 'c', 'e']\n\nrange('A', 'E', 2)\n//=> ['A', 'C', 'E']\n```\n\n### Invalid ranges\n\nWhen an invalid range is passed, `null` is returned. \n\n```js\nrange('1.1', '2');\n//=> null\n\nrange('a', '2');\n//=> null\n\nrange(1, 10, 'foo');\n//=> null\n```\n\nIf you want errors to be throw, pass `silent: false` on the options:\n\n\n### Custom function\n\nOptionally pass a custom function as the third or fourth argument:\n\n```js\nrange('a', 'e', function (val, isNumber, pad, i) {\n  if (!isNumber) {\n    return String.fromCharCode(val) + i;\n  }\n  return val;\n});\n//=> ['a0', 'b1', 'c2', 'd3', 'e4']\n```\n\n### Special characters\n\nA special character may be passed as the third arg instead of a step increment. These characters can be pretty useful for brace expansion, creating file paths, test fixtures and similar use case.\n\n```js\nrange('a', 'z', SPECIAL_CHARACTER_HERE);\n```\n\n**Supported characters**\n\n - `+`: repeat the given string `n` times\n - `|`: create a regex-ready string, instead of an array\n - `>`: join values to single array element\n - `?`: randomize the given pattern using [randomatic]\n\n#### `+`\n\nRepeat the first argument the number of times passed on the second argument.\n\n**Examples:**\n\n```js\nrange('a', 3, '+');\n//=> ['a', 'a', 'a']\n\nrange('abc', 2, '+');\n//=> ['abc', 'abc']\n```\n\n#### `|` and `~`\n\nCreates a regex-capable string (either a logical `or` or a character class) from the expanded arguments.\n\n**Examples:**\n\n```js\nrange('a', 'c', '|');\n//=> ['(a|b|c)'\n\nrange('a', 'c', '~');\n//=> ['[a-c]'\n\nrange('a', 'z', '|5');\n//=> ['(a|f|k|p|u|z)'\n```\n\n**Automatic separator correction**\n\nTo avoid this error:\n\n> `Range out of order in character class`\n\nFill-range detects invalid sequences and uses the correct syntax. For example:\n\n**invalid** (regex)\n\nIf you pass these:\n\n```js\nrange('a', 'z', '~5');\n// which would result in this\n//=> ['[a-f-k-p-u-z]']\n\nrange('10', '20', '~');\n// which would result in this\n//=> ['[10-20]']\n```\n\n**valid** (regex)\n\nfill-range corrects them to this:\n\n```js\nrange('a', 'z', '~5');\n//=> ['(a|f|k|p|u|z)'\n\nrange('10', '20', '~');\n//=> ['(10-20)'\n```\n\n\n#### `>`\n\nJoins all values in the returned array to a single value.\n\n**Examples:**\n\n```js\nrange('a', 'e', '>');\n//=> ['abcde']\n\nrange('5', '8', '>');\n//=> ['5678']\n\nrange('2', '20', '2>');\n//=> ['2468101214161820']\n```\n\n\n#### `?`\n\nUses [randomatic] to generate randomized alpha, numeric, or alpha-numeric patterns based on the provided arguments.\n\n**Examples:**\n\n_(actual results would obviously be randomized)_\n\nGenerate a 5-character, uppercase, alphabetical string:\n\n```js\nrange('A', 5, '?');\n//=> ['NSHAK']\n```\n\nGenerate a 5-digit random number:\n\n```js\nrange('0', 5, '?');\n//=> ['36583']\n```\n\nGenerate a 10-character alpha-numeric string:\n\n```js\nrange('A0', 10, '?');\n//=> ['5YJD60VQNN']\n```\n\nSee the [randomatic] repo for all available options and or to create issues or feature requests related to randomization.\n\n\n## Run tests\n\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm test\n```\n\n## Related\n\n- [micromatch]: wildcard/glob matcher for javascript. a faster alternative to minimatch.\n- [expand-range]: uses fill-range for range expansion in strings\n- [braces]: uses expand range to do range expansion in glob patterns and braces.\n\n\n## Contributing\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/fill-range/issues)\n\n## Author\n\n**Jon Schlinkert**\n \n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2014-2015 Jon Schlinkert  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb](https://github.com/assemble/verb) on February 25, 2015._\n\n[randomatic]: https://github.com/jonschlinkert/randomatic\n\n[expand-range]: https://github.com/jonschlinkert/expand-range\n[micromatch]: https://github.com/jonschlinkert/micromatch\n[braces]: https://github.com/jonschlinkert/braces\n",
  "readmeFilename": "README.md",
  "_id": "fill-range@2.2.0",
  "dist": {
    "shasum": "4016b26191196e428d3a48c1e27e44cfe0188725"
  },
  "_from": "fill-range@^2.1.0",
  "_resolved": "https://registry.npmjs.org/fill-range/-/fill-range-2.2.0.tgz"
}
